{
    "project": {},
    "files": {
        "src/app.js": {
            "name": "src/app.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/vNode.js": {
            "name": "src/vNode.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {},
    "elements": {},
    "classitems": [
        {
            "file": "src/app.js",
            "line": 5,
            "description": "current mini seconds",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 12,
            "description": "is object empty?",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 21,
            "description": "document.getElementById",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 30,
            "description": "Events available",
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 52,
            "description": "string converter",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 60,
            "description": "obj copier",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 68,
            "description": "app base class",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cnf",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ],
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 88,
            "description": "config default\nno data, no render",
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 104,
            "description": "callback registry",
            "type": "{{els: {}}}",
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 118,
            "description": "get call by name and type",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 134,
            "description": "event triggers",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 147,
            "description": "fire events",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 164,
            "description": "update state of an element",
            "params": [
                {
                    "name": "elementOrName,",
                    "description": "if value presents and this param is string, this will be a direct update",
                    "type": "*"
                },
                {
                    "name": "valueOrNull",
                    "description": "optional, if the first param is element with value, it will use that",
                    "type": "*",
                    "optional": true,
                    "optdefault": "Null"
                }
            ],
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 223,
            "description": "add cr to fire this for your own elements\nor even directly over-write this function",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 234,
            "description": "template engine",
            "params": [
                {
                    "name": "template",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "doNotSkip",
                    "description": "if true, do not skip the undefined tags",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 259,
            "description": "store state in local storage",
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 267,
            "description": "retrieve state from local storage",
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 282,
            "description": "template: must have default template, or render will return empty string\nif 'selected' template is available, when data fits in the current state, it will use selected state\nwithin template, use\n{__s} for save state calls, e.g. {__s}('foo', 'bar') or {__s}s(this) for elements",
            "type": "{{main: {}, sub: {}}}",
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 290,
            "description": "data for elements",
            "type": "{{main: {}, sub: {}}}",
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 295,
            "description": "previous data",
            "type": "{{main: {}, sub: {}}}",
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 300,
            "description": "callback: get element style",
            "params": [
                {
                    "name": "elName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 322,
            "description": "generate element id",
            "params": [
                {
                    "name": "elName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 330,
            "description": "callback: custom data parser",
            "params": [
                {
                    "name": "elName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "subNodeCnt",
                    "description": "if > 0, it's a sub node",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "}"
            },
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 399,
            "description": "get node by elementName",
            "params": [
                {
                    "name": "elName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Element"
            },
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 408,
            "description": "main template style",
            "type": "{string}",
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 413,
            "description": "render entire app",
            "params": [
                {
                    "name": "full",
                    "description": "if true, force a complete render\n\nRUN LOGIC:\n1. data changed for el?\n 1.1 is it a wrapper type?\n   YES: go to 1.2\n   NO:\n     1.1.0 is the vNode non-existent?\n       YES: new vNode()\n       NO: is the template style changed?\n         YES: new vNode\n         NO: go to next\n     1.1.1 is the data empty?\n       YES: vNode.remove()\n       NO: vNode.updateHTML()\n 1.2 yes it's a wrapper\n   1.2.0 is vNode non-existent?\n     YES: new vNode plus children\n     NO: go to next\n   1.2.1 loop thru children:\n     with each child:\n     new data count > old data count?\n     YES:\n       vNode exists?\n         YES: vNode.updateHTML() - no need to remove anything (so order doesn't really matter)\n         NO: new vNode, vNode.right(parent);\n    NO:\n       count vNode and remove ones that are not in vNode.remove()",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 481,
            "description": "render single element",
            "params": [
                {
                    "name": "elName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "forceRender",
                    "description": "if true, for render without using node",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 638,
            "description": "init app",
            "params": [
                {
                    "name": "container",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "autoRender",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 654,
            "description": "export to query string",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 668,
            "description": "apis for fast access over data",
            "params": [
                {
                    "name": "elName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "nodePosition",
                    "description": "",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "Null"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": ""
        },
        {
            "file": "src/app.js",
            "line": 686,
            "description": "THIS IS THE MAIN ENTRY POINT\n\ncreate / retrieve a single app\n\ne.g.\n```\nvar app = SimpleApp('my-app');\napp.init(document.getElementById('app_container'), true);\n```",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "config",
                    "description": "| note: this is the system config",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ],
            "return": {
                "description": "",
                "type": "SimpleApp"
            },
            "class": ""
        },
        {
            "file": "src/vNode.js",
            "line": 1,
            "description": "virtual node",
            "params": [
                {
                    "name": "src",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "parentNode",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "src/vNode.js",
            "line": 18,
            "description": "insert to the left",
            "params": [
                {
                    "name": "node",
                    "description": "new node to insert before",
                    "type": "Object"
                },
                {
                    "name": "parent",
                    "description": "parent node",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "class": ""
        },
        {
            "file": "src/vNode.js",
            "line": 33,
            "description": "insert to the right",
            "params": [
                {
                    "name": "parent",
                    "description": "parent node",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "class": ""
        },
        {
            "file": "src/vNode.js",
            "line": 45,
            "description": "replace given node with self",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "src/vNode.js",
            "line": 59,
            "description": "update node html",
            "params": [
                {
                    "name": "html",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "src/vNode.js",
            "line": 74,
            "description": "append a single vNode",
            "params": [
                {
                    "name": "vNode",
                    "description": "",
                    "type": "VNode"
                }
            ],
            "class": ""
        },
        {
            "file": "src/vNode.js",
            "line": 81,
            "description": "append multiple vnodes",
            "params": [
                {
                    "name": "vNodes",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/app.js:5"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/app.js:12"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/app.js:21"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/app.js:118"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/app.js:234"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/app.js:300"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/app.js:322"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/app.js:330"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/app.js:399"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/app.js:481"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/app.js:654"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/app.js:668"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/app.js:686"
        },
        {
            "message": "Missing item type\ncurrent mini seconds",
            "line": " src/app.js:5"
        },
        {
            "message": "Missing item type\nis object empty?",
            "line": " src/app.js:12"
        },
        {
            "message": "Missing item type\ndocument.getElementById",
            "line": " src/app.js:21"
        },
        {
            "message": "Missing item type\nEvents available",
            "line": " src/app.js:30"
        },
        {
            "message": "Missing item type\nstring converter",
            "line": " src/app.js:52"
        },
        {
            "message": "Missing item type\nobj copier",
            "line": " src/app.js:60"
        },
        {
            "message": "Missing item type\napp base class",
            "line": " src/app.js:68"
        },
        {
            "message": "Missing item type\nconfig default\nno data, no render",
            "line": " src/app.js:88"
        },
        {
            "message": "Missing item type\ncallback registry",
            "line": " src/app.js:104"
        },
        {
            "message": "Missing item type\nget call by name and type",
            "line": " src/app.js:118"
        },
        {
            "message": "Missing item type\nevent triggers",
            "line": " src/app.js:134"
        },
        {
            "message": "Missing item type\nfire events",
            "line": " src/app.js:147"
        },
        {
            "message": "Missing item type\nupdate state of an element",
            "line": " src/app.js:164"
        },
        {
            "message": "Missing item type\nadd cr to fire this for your own elements\nor even directly over-write this function",
            "line": " src/app.js:223"
        },
        {
            "message": "Missing item type\ntemplate engine",
            "line": " src/app.js:234"
        },
        {
            "message": "Missing item type\nstore state in local storage",
            "line": " src/app.js:259"
        },
        {
            "message": "Missing item type\nretrieve state from local storage",
            "line": " src/app.js:267"
        },
        {
            "message": "Missing item type\ntemplate: must have default template, or render will return empty string\nif 'selected' template is available, when data fits in the current state, it will use selected state\nwithin template, use\n{__s} for save state calls, e.g. {__s}('foo', 'bar') or {__s}s(this) for elements",
            "line": " src/app.js:282"
        },
        {
            "message": "Missing item type\ndata for elements",
            "line": " src/app.js:290"
        },
        {
            "message": "Missing item type\nprevious data",
            "line": " src/app.js:295"
        },
        {
            "message": "Missing item type\ncallback: get element style",
            "line": " src/app.js:300"
        },
        {
            "message": "Missing item type\ngenerate element id",
            "line": " src/app.js:322"
        },
        {
            "message": "Missing item type\ncallback: custom data parser",
            "line": " src/app.js:330"
        },
        {
            "message": "Missing item type\nget node by elementName",
            "line": " src/app.js:399"
        },
        {
            "message": "Missing item type\nmain template style",
            "line": " src/app.js:408"
        },
        {
            "message": "Missing item type\nrender entire app",
            "line": " src/app.js:413"
        },
        {
            "message": "Missing item type\nrender single element",
            "line": " src/app.js:481"
        },
        {
            "message": "Missing item type\ninit app",
            "line": " src/app.js:638"
        },
        {
            "message": "Missing item type\nexport to query string",
            "line": " src/app.js:654"
        },
        {
            "message": "Missing item type\napis for fast access over data",
            "line": " src/app.js:668"
        },
        {
            "message": "Missing item type\nTHIS IS THE MAIN ENTRY POINT\n\ncreate / retrieve a single app\n\ne.g.\n```\nvar app = SimpleApp('my-app');\napp.init(document.getElementById('app_container'), true);\n```",
            "line": " src/app.js:686"
        },
        {
            "message": "Missing item type\nvirtual node",
            "line": " src/vNode.js:1"
        },
        {
            "message": "Missing item type\ninsert to the left",
            "line": " src/vNode.js:18"
        },
        {
            "message": "Missing item type\ninsert to the right",
            "line": " src/vNode.js:33"
        },
        {
            "message": "Missing item type\nreplace given node with self",
            "line": " src/vNode.js:45"
        },
        {
            "message": "Missing item type\nupdate node html",
            "line": " src/vNode.js:59"
        },
        {
            "message": "Missing item type\nappend a single vNode",
            "line": " src/vNode.js:74"
        },
        {
            "message": "Missing item type\nappend multiple vnodes",
            "line": " src/vNode.js:81"
        }
    ]
}